pipeline {
    agent any
    environment {
        VAULT_ADDR = 'http://44.221.215.67:8200'
    }
    stages {
        stage('Retrieve Secrets and Checkout Code') {
            steps {
                withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                    sh """
                        export VAULT_ADDR=${VAULT_ADDR}
                        export VAULT_TOKEN=\$VAULT_TOKEN
                        vault kv get -format=json secret/sonarqube > vault-sonarqube-output.json
                    """
                    script {
                        // Parse the JSON output for SonarQube information
                        def sonarqubeOutput = readJSON file: 'vault-sonarqube-output.json'
                        def sonarqubeUrl = sonarqubeOutput.data.data.SONARQUBE_URL
                        def sonarqubeToken = sonarqubeOutput.data.data.SONARQUBE_TOKEN

                        // Set environment variables for the SonarQube stage
                        env.SONARQUBE_URL = sonarqubeUrl
                        env.SONARQUBE_AUTH_TOKEN = sonarqubeToken

                        echo "Retrieved SonarQube URL: ${sonarqubeUrl}"
                        echo "SonarQube token has been set."
                    }
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    // Use GitHub credentials from Vault for authentication, if needed
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config --global credential.helper store
                            echo "https://${env.GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com" > ~/.git-credentials
                            git clone https://github.com/${env.GITHUB_USERNAME}/your-repository.git
                        """
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        // Ensure SonarScanner is available and run the analysis
                        sh """
                        sonar-scanner \
                          -Dsonar.projectKey=my-python-project \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${env.SONARQUBE_URL} \
                          -Dsonar.login=${env.SONARQUBE_AUTH_TOKEN}
                        """
                    }
                }
            }
        }
        stage('Build and Push to ECR') {
            steps {
                // Add your build steps here if needed (e.g., Docker build and push)
                echo 'Build and push to ECR step.'
            }
        }
    }
    post {
        always {
            // Clean up any temporary files or secrets
            sh 'rm -f vault-sonarqube-output.json'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
