pipeline {
    agent any
    environment {
        VAULT_ADDR = 'http://44.221.215.67:8200'
        PATH = "${PATH}:/opt/sonar-scanner/bin"
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        DOCKER_IMAGE_WEB = 'insurance-fraud-detection-web'
        DOCKER_IMAGE_DB = 'insurance-fraud-detection-db'
    }
    stages {
        stage('Checkout Code') {
            steps {
                withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                    sh """
                        export VAULT_ADDR=${VAULT_ADDR}
                        export VAULT_TOKEN=\$VAULT_TOKEN
                        vault kv get -format=json secret/aws > vault-aws-output.json
                    """
                    script {
                        // Parse the JSON output for AWS credentials and ECR repo URLs
                        def vaultOutput = readJSON file: 'vault-aws-output.json'
                        def AWS_ACCESS_KEY_ID = vaultOutput.data.data.AWS_ACCESS_KEY_ID
                        def AWS_SECRET_ACCESS_KEY = vaultOutput.data.data.AWS_SECRET_ACCESS_KEY
                        def ECR_REPO_WEB = vaultOutput.data.data.ECR_REPO_WEB
                        def ECR_REPO_DB = vaultOutput.data.data.ECR_REPO_DB

                        echo "AWS credentials and ECR repo URLs retrieved successfully."

                        // Set environment variables for the AWS credentials and ECR URLs
                        env.AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
                        env.AWS_SECRET_ACCESS_KEY = AWS_SECRET_ACCESS_KEY
                        env.ECR_REPO_WEB = ECR_REPO_WEB
                        env.ECR_REPO_DB = ECR_REPO_DB
                    }
                }
            }
        }

        stage('Verify SonarScanner Installation') {
            steps {
                sh 'sonar-scanner --version'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        sh """
                        sonar-scanner \
                          -Dsonar.projectKey=my-python-project \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${env.SONAR_HOST_URL} \
                          -Dsonar.login=${env.SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Docker Web Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE_WEB} ./python-ml-app'
                }
            }
        }
        
        stage('Build Docker DB Image') {
            steps {
                script {
                    sh 'docker pull mysql:8.0 && docker tag mysql:8.0 ${DOCKER_IMAGE_DB}'
                }
            }
        }

        stage('Trivy Scan for Docker Web Image') {
            steps {
                script {
                    sh "trivy image --severity HIGH,CRITICAL --exit-code 0 --scanners vuln ${DOCKER_IMAGE_WEB}"
                }
            }
        }

        stage('Trivy Scan for Docker DB Image') {
            steps {
                script {
                    sh "trivy image --severity HIGH,CRITICAL --exit-code 0 --scanners vuln ${DOCKER_IMAGE_DB}"
                }
            }
        }

        stage('Push Web Image to ECR') {
            when {
                expression { return params.PUSH_TO_ECR }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                        sh """
                            export AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO_WEB}
                            docker tag ${DOCKER_IMAGE_WEB} ${ECR_REPO_WEB}:latest
                            docker push ${ECR_REPO_WEB}:latest
                        """
                    }
                }
            }
        }

        stage('Push DB Image to ECR') {
            when {
                expression { return params.PUSH_TO_ECR }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                        sh """
                            export AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO_DB}
                            docker tag ${DOCKER_IMAGE_DB} ${ECR_REPO_DB}:latest
                            docker push ${ECR_REPO_DB}:latest
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'rm -f vault-aws-output.json'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
