pipeline {
    agent any
    parameters {
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push image to AWS ECR')
        booleanParam(name: 'PUSH_TO_ARTIFACTORY', defaultValue: false, description: 'Push image to JFrog Artifactory')
    }
    environment {
        VAULT_ADDR = 'http://127.0.0.1:8200'
        PATH = "${PATH}:/opt/sonar-scanner/bin"
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        DOCKER_IMAGE_WEB = 'insurance-fraud-detection-web'
        DOCKER_IMAGE_DB = 'insurance-fraud-detection-db'
        
    }
    stages {
        stage('Checkout Code') {
            steps {
                withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                    sh """
                        export VAULT_ADDR=${VAULT_ADDR}
                        export VAULT_TOKEN=\$VAULT_TOKEN
                        vault kv get -format=json secret/sonarqube > vault-sonarqube-output.json
                        vault kv get -format=json secret/ecr > vault-ecr-output.json
                        vault kv get -format=json secret/aws > vault-aws-output.json
                    """
                    script {
                        // Parse the JSON output for the SonarQube URL and token
                        def vaultSonarOutput = readJSON file: 'vault-sonarqube-output.json'
                        def vaultEcrOutput = readJSON file: 'vault-ecr-output.json'
                        def vaultAwsOutput = readJSON file: 'vault-aws-output.json'

                        def SONARQUBE_URL = vaultSonarOutput.data.data.SONARQUBE_URL
                        def SONARQUBE_TOKEN = vaultSonarOutput.data.data.SONARQUBE_TOKEN
                        def ECR_REPO_WEB = vaultEcrOutput.data.data.ECR_REPO_WEB
                        def ECR_REPO_DB = vaultEcrOutput.data.data.ECR_REPO_DB
                        def AWS_ACCESS_KEY_ID = vaultAwsOutput.data.data.AWS_ACCESS_KEY_ID
                        def AWS_SECRET_ACCESS_KEY = vaultAwsOutput.data.data.AWS_SECRET_ACCESS_KEY
                        

                        echo "SonarQube URL: ${SONARQUBE_URL}"
                        echo "SonarQube token retrieved successfully."
                        
                        
                        // Set environment variables for the SonarQube analysis and AWS credentials
                        env.SONAR_HOST_URL = SONARQUBE_URL
                        env.SONAR_AUTH_TOKEN = SONARQUBE_TOKEN
                        env.ECR_REPO_WEB = ECR_REPO_WEB
                        env.ECR_REPO_DB = ECR_REPO_DB
                        env.AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
                        env.AWS_SECRET_ACCESS_KEY = AWS_SECRET_ACCESS_KEY

                        
                    }
                }
            }
        }

        stage('Verify SonarScanner Installation') {
            steps {
                sh 'sonar-scanner --version'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        sh """
                        sonar-scanner \
                          -Dsonar.projectKey=my-python-project \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${env.SONAR_HOST_URL} \
                          -Dsonar.login=${env.SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }
        stage('Build Docker Web Image') {
        steps {
          script {
            sh '''
              cd python-ml-app
              docker build -t ${DOCKER_IMAGE_WEB} .
            '''
           }
         }
        }
        
        stage('Build Docker DB Image') {
        steps {
          script {
            sh '''
              docker pull mysql:8.0
              docker tag mysql:8.0 ${DOCKER_IMAGE_DB}
            '''
           }
         }
        }
        stage('Trivy Scan for Docker Web Image ') {
            steps {
                script {
                    // sh "trivy image --severity HIGH,CRITICAL --exit-code 1 ${DOCKER_IMAGE}"
                    sh "trivy image --severity HIGH,CRITICAL --exit-code 0 --scanners vuln ${DOCKER_IMAGE_WEB}"

                }
            }
        }
        
        stage('Trivy Scan for Docker DB Image ') {
            steps {
                script {
                    // sh "trivy image --severity HIGH,CRITICAL --exit-code 1 ${DOCKER_IMAGE}"
                    sh "trivy image --severity HIGH,CRITICAL --exit-code 0 --scanners vuln ${DOCKER_IMAGE_DB}"

                }
            }
        }

        stage('Push Web Image to AWS ECR') {
            when {
                expression { params.PUSH_TO_ECR }
            }
            steps {
                script {
                    sh """
                      export AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}
                      export AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}
                      aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 931058976119.dkr.ecr.us-east-1.amazonaws.com
                      docker tag ${DOCKER_IMAGE_WEB}:latest ${env.ECR_REPO_WEB}:latest
                      docker push ${env.ECR_REPO_WEB}:latest
                    """
                }
            }
        }

        stage('Push DB Image to AWS ECR') {
            when {
                expression { params.PUSH_TO_ECR }
            }
            steps {
                script {
                    sh """
                      export AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}
                      export AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}
                      aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 931058976119.dkr.ecr.us-east-1.amazonaws.com
                      docker tag ${DOCKER_IMAGE_DB}:latest ${env.ECR_REPO_DB}:latest
                      docker push ${env.ECR_REPO_DB}:latest
                    """
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    sh """
                      sed -i 's|IMAGE_PLACEHOLDER_WEB|${env.ECR_REPO_WEB}:latest|' python-ml-app-manifests/deployment-web.yaml
                      sed -i 's|IMAGE_PLACEHOLDER_DB|${env.ECR_REPO_DB}:latest|' python-ml-app-manifests/deployment-mysql.yaml
                    """
                    echo 'Kubernetes manifests updated with the new image tags.'
                }
            }
        }
        

        
    }
    post {
        always {
            sh 'rm -f vault-sonarqube-output.json'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
