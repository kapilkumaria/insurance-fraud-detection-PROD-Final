pipeline {
    agent any
    environment {
        VAULT_ADDR = 'http://44.221.215.67:8200'
        PATH = "${PATH}:/opt/sonar-scanner/bin"
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        
    }
    stages {
        stage('Checkout Code') {
            steps {
                withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                    sh """
                        export VAULT_ADDR=${VAULT_ADDR}
                        export VAULT_TOKEN=\$VAULT_TOKEN
                        vault kv get -format=json secret/sonarqube > vault-sonarqube-output.json
                    """
                    script {
                        // Parse the JSON output for the SonarQube URL and token
                        def vaultOutput = readJSON file: 'vault-sonarqube-output.json'
                        def SONARQUBE_URL = vaultOutput.data.data.SONARQUBE_URL
                        def SONARQUBE_TOKEN = vaultOutput.data.data.SONARQUBE_TOKEN

                        echo "SonarQube URL: ${SONARQUBE_URL}"
                        echo "SonarQube token retrieved successfully."

                        // Set environment variables for the SonarQube analysis
                        env.SONAR_HOST_URL = SONARQUBE_URL
                        env.SONAR_AUTH_TOKEN = SONARQUBE_TOKEN
                    }
                }
            }
        }

        stage('Verify SonarScanner Installation') {
            steps {
                sh 'sonar-scanner --version'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        sh """
                        sonar-scanner \
                          -Dsonar.projectKey=my-python-project \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${env.SONAR_HOST_URL} \
                          -Dsonar.login=${env.SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'rm -f vault-sonarqube-output.json'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
